#!/bin/bash

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"

echo "üöÄ Deploying AI Digest Monitoring Infrastructure"
echo "================================================"

# Check for AWS CLI
if ! command -v aws &> /dev/null; then
    echo "‚ùå AWS CLI is not installed. Please install it first."
    exit 1
fi

# Check AWS credentials
if ! aws sts get-caller-identity &> /dev/null; then
    echo "‚ùå AWS credentials not configured. Please run 'aws configure'"
    exit 1
fi

# Get AWS region
AWS_REGION=$(aws configure get region)
if [ -z "$AWS_REGION" ]; then
    echo "‚ùå AWS region not configured. Please set it with 'aws configure set region <region>'"
    exit 1
fi

echo "üìç Using AWS Region: $AWS_REGION"
echo ""

# Navigate to terraform directory
cd "$PROJECT_ROOT/terraform/aws"

# Initialize Terraform if needed
if [ ! -d ".terraform" ]; then
    echo "üì¶ Initializing Terraform..."
    terraform init
fi

# Plan the monitoring changes
echo "üìã Planning monitoring infrastructure..."
terraform plan -target=aws_cloudwatch_dashboard.ai_digest_main \
               -target=aws_cloudwatch_dashboard.ai_digest_costs \
               -target=aws_cloudwatch_dashboard.ai_digest_agents \
               -target=aws_cloudwatch_metric_alarm.lambda_errors \
               -target=aws_cloudwatch_metric_alarm.lambda_throttles \
               -target=aws_cloudwatch_metric_alarm.lambda_duration \
               -target=aws_cloudwatch_metric_alarm.api_gateway_4xx \
               -target=aws_cloudwatch_metric_alarm.api_gateway_5xx \
               -target=aws_cloudwatch_metric_alarm.dynamodb_errors \
               -target=aws_s3_bucket_metric.processed_emails_metrics \
               -out=monitoring.tfplan

echo ""
read -p "üìä Review the plan above. Deploy monitoring? (y/n) " -n 1 -r
echo ""

if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo "üöÄ Deploying monitoring infrastructure..."
    terraform apply monitoring.tfplan
    
    echo ""
    echo "‚úÖ Monitoring infrastructure deployed successfully!"
    echo ""
    echo "üìä Dashboard URLs:"
    echo "=================="
    
    # Get dashboard URLs from Terraform outputs
    MAIN_DASHBOARD=$(terraform output -raw main_dashboard_url 2>/dev/null || echo "")
    COST_DASHBOARD=$(terraform output -raw cost_dashboard_url 2>/dev/null || echo "")
    AGENTS_DASHBOARD=$(terraform output -raw agents_dashboard_url 2>/dev/null || echo "")
    
    if [ -n "$MAIN_DASHBOARD" ]; then
        echo "üìà Main Dashboard: $MAIN_DASHBOARD"
    fi
    if [ -n "$COST_DASHBOARD" ]; then
        echo "üí∞ Cost Dashboard: $COST_DASHBOARD"
    fi
    if [ -n "$AGENTS_DASHBOARD" ]; then
        echo "ü§ñ Agents Dashboard: $AGENTS_DASHBOARD"
    fi
    
    echo ""
    echo "üîî CloudWatch Alarms configured:"
    echo "================================="
    echo "‚Ä¢ Lambda Errors (threshold: 5 errors in 10 min)"
    echo "‚Ä¢ Lambda Throttles (threshold: any throttles)"
    echo "‚Ä¢ Lambda Duration (threshold: >4 minutes)"
    echo "‚Ä¢ API Gateway 4XX Errors (threshold: >10 in 10 min)"
    echo "‚Ä¢ API Gateway 5XX Errors (threshold: >5 in 5 min)"
    echo "‚Ä¢ DynamoDB Errors (threshold: >5 in 10 min)"
    
    echo ""
    echo "üí° Tips:"
    echo "========"
    echo "‚Ä¢ View real-time metrics in CloudWatch dashboards"
    echo "‚Ä¢ Set up SNS topic for alarm notifications"
    echo "‚Ä¢ Consider adding custom metrics from your Lambda functions"
    echo "‚Ä¢ Use CloudWatch Insights for advanced log analysis"
    
    # Clean up plan file
    rm -f monitoring.tfplan
else
    echo "‚ùå Deployment cancelled"
    rm -f monitoring.tfplan
    exit 1
fi