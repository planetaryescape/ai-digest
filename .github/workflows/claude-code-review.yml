name: Claude Code Review

on:
  pull_request:
    types: [opened]
    # Optional: Only run on specific file changes
    # paths:
    #   - "src/**/*.ts"
    #   - "src/**/*.tsx"
    #   - "src/**/*.js"
    #   - "src/**/*.jsx"

jobs:
  claude-review:
    # Optional: Filter by PR author
    # if: |
    #   github.event.pull_request.user.login == 'external-contributor' ||
    #   github.event.pull_request.user.login == 'new-developer' ||
    #   github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR'
    
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: Run Claude Code Review
        id: claude-review
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4.1)
          # model: "claude-opus-4-1-20250805"

          # Direct prompt for automated review (no @claude mention needed)
          direct_prompt: |
            You are reviewing code for an INDIE DEVELOPER building SaaS products for rapid market validation.
            
            CONTEXT: Solo developer, shipping fast, targeting tens of thousands (not millions) of users.
            
            FOCUS ON:
            ✅ Security issues that actually matter (SQL injection, XSS, exposed secrets)
            ✅ Bugs that will break the app or lose data
            ✅ Performance issues users will notice (>1s delays)
            ✅ Code that will slow down future development
            
            SKIP/IGNORE:
            ❌ Perfect code structure suggestions
            ❌ Minor optimizations (<100ms improvements)
            ❌ Test coverage complaints
            ❌ Enterprise patterns (microservices, complex abstractions)
            ❌ Theoretical scalability issues
            ❌ Style preferences that don't affect functionality
            
            REVIEW APPROACH:
            1. Will this code work for the next 1000 users? If yes, it's probably fine.
            2. Are there security holes that a script kiddie could exploit? Fix those.
            3. Will this make adding features harder? Only mention if significantly harder.
            4. Is there a 5-minute fix that provides 80% of the value? Suggest that.
            
            Be direct and brief. Only comment on things that ACTUALLY matter.
            If it works and isn't dangerous, maybe just approve it.
            
            Rate the PR: 🚢 SHIP IT (works fine) | ⚠️ FIX FIRST (real issues) | 🔴 BLOCKING (breaks prod)

          # Optional: Use sticky comments to make Claude reuse the same comment on subsequent pushes to the same PR
          # use_sticky_comment: true
          
          # Optional: Customize review based on file types
          # direct_prompt: |
          #   Review this PR focusing on:
          #   - For TypeScript files: Type safety and proper interface usage
          #   - For API endpoints: Security, input validation, and error handling
          #   - For React components: Performance, accessibility, and best practices
          #   - For tests: Coverage, edge cases, and test quality
          
          # Optional: Different prompts for different authors
          # direct_prompt: |
          #   ${{ github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR' && 
          #   'Welcome! Please review this PR from a first-time contributor. Be encouraging and provide detailed explanations for any suggestions.' ||
          #   'Please provide a thorough code review focusing on our coding standards and best practices.' }}
          
          # Optional: Add specific tools for running tests or linting
          # allowed_tools: "Bash(npm run test),Bash(npm run lint),Bash(npm run typecheck)"
          
          # Optional: Skip review for certain conditions
          # if: |
          #   !contains(github.event.pull_request.title, '[skip-review]') &&
          #   !contains(github.event.pull_request.title, '[WIP]')

